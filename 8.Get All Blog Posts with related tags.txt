1. Models with many to many relationship

public class BlogPost
{
	public Guid Id { get; set; }
	public string Heading { get; set; }
	public string PageTitle { get; set; }
	public string Content { get; set; }
	public string ShortDescription { get; set; }
	public string FeaturedImageUrl { get; set; }
	public string UrlHandle { get; set; }
	public DateTime PublishDate { get; set; }
	public string Author { get; set; }
	public bool IsVisible { get; set; }

	//Navigation property to many tags
	public ICollection<Tag> Tags { get; set; }
}

public class Tag
{
	public Guid Id { get; set; }
	public string Name { get; set; }
	public string DisplayName { get; set; }
	
	//Navigation property to many BlogPosts
	public ICollection<BlogPost> BlogPosts { get; set; }
}

2. Retrieve related data 

public async Task<IEnumerable<BlogPost>> GetAllAsync()
{
	var blogposts = await blogsDbContext.BlogPosts
		.Include(p => p.Tags)  //Brings related entities
		.ToListAsync();

	return blogposts;
}

3.
@model IEnumerable<Blogz.Web.Models.Domain.BlogPost>

@{
}

<div class="bg-secondary bg-opacity-10 py-2">
    <div class="container">
        <h1> Admin : View all Blog Posts</h1>
    </div>
</div>

<div class="container py-5">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Heading</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var blogPost in Model)
            {
                <tr>
                    <td>@blogPost.Id</td>
                    <td>@blogPost.Heading</td>
                    <td>
                        <div class="d-flex">
                            @foreach (var tag in blogPost.Tags)
                            {
                                <span class="badge bg-secondary me-1">@tag.Name</span>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>