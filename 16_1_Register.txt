user
user@gmail.com
P@ssword1

1. Create Register View

@model Blogz.Web.Models.ViewModels.RegisterModel
@{
}
<div class="container mx-auto">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            <h1 class="mt-3 mb-3 h3">
            </h1>
            <form method="post">
            <div class="mb-3">
                <label class="form-label">Username</label>
                <input type="text" id="username" class="form-control" asp-for="UserName"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" id="email" class="form-control" asp-for="Email"/>
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" id="password" class="form-control" asp-for="Password"/>
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-dark">Register</button>
            </div>
            </form>
        </div>
    </div>
</div>

2. Add Register Button :-> after the menu option buttons on the left -> Add register button to the right

</ul>
<div class="d-flex">
   <a class="btn me-3 bg-light text-dark" asp-area="" asp-controller="Account" asp-action="Register">Register</a>
</div>

3. Create user controller 

public class AccountController : Controller
{
	private readonly UserManager<ApplicationUser> userManager;

	public AccountController(UserManager<ApplicationUser> userManager)
	{
		this.userManager = userManager;
	}
	[HttpGet]
	public IActionResult Register()
	{
		return View();
	}

	[HttpPost]
	public async Task<IActionResult> Register(RegisterModel model)
	{
		var identityUser = new ApplicationUser
		{
			UserName = model.UserName,
			Email = model.Email
		};
		
		var result = await userManager.CreateAsync(identityUser, model.Password); // First Create User 

		if (result.Succeeded)
		{
			var roleResult = await userManager.AddToRoleAsync(identityUser, "User");

			if (roleResult.Succeeded)
			{
				return RedirectToAction("Register");
			}
		}

		return View();
	}
}

4.Program.cs configure password requirements after adding identity builder.Services.AddIdentity<ApplicationUser, Role>();

builder.Services.Configure<IdentityOptions>(options =>
{
    options.Password.RequireDigit = true;
    options.Password.RequireLowercase = true;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequireUppercase = true;
    options.Password.RequiredLength = 6;
    options.Password.RequiredUniqueChars = 1;
});

5.