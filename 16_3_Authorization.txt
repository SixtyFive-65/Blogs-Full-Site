---> Add [Authorize] attribute to restrict access only to logged in users.

1. We can use the attribute like so  [Authorize(Roles = "SuperAdmin,Admin")]


2. If a user doesn't have access, they get redirected to account/accessDenied so we add the controller action on Account controller

[HttpGet]
public async Task<IActionResult> LogOut()
{
	await signInManager.SignOutAsync();

	return RedirectToAction("Index", "Home");
}

3. AccessDenied View

@{
}

<div class="container my-5">
    <h2>Access to this page is restricted to Admins</h2>
</div>

4. Restrict Viewing of Admin Tab to Admins and SuperAdmins

@if (signInManager.IsSignedIn(User) && User.IsInRole("Admin"))
{
	<li class="nav-item dropdown">
		<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
			Admin
		</a>
		<ul class="dropdown-menu">
			<li><a class="dropdown-item" asp-area="" asp-controller="AdminTag" asp-action="Add">Add New Tag</a></li>
			<li><a class="dropdown-item" asp-area="" asp-controller="AdminTag" asp-action="GetTags">View Tags</a></li>
			<li><a class="dropdown-item" asp-area="" asp-controller="AdminBlogPost" asp-action="Add">Add Blog Post</a></li>
			<li><a class="dropdown-item" asp-area="" asp-controller="AdminBlogPost" asp-action="GetAllBlogPosts">View Blog Posts</a></li>
		</ul>
	</li>
}

5. Apply Authorize to Actions or entire controller

[Authorize(Roles = "SuperAdmin,Admin")]
public class AdminTagController : Controller
{
	private readonly ITagRepository tagRepository;
}

6.Apply Redirect so on login you are directed to the requested page and not redirected Home.

---> Add RedirectUrl string to login model and pass redirect string.

[HttpGet]
public IActionResult Login( string returnUrl)
{
	var loginModel = new LoginModel { ReturnUrl = returnUrl }; 
	
	return View(loginModel);
}

--->> Add RedirectUrl as a hidden field

<form method="post">
	<div class="mb-3">
		<label class="form-label">Username</label>
		<input type="text" id="username" class="form-control" asp-for="UserName" />
	</div>
	<div class="mb-3">
		<label class="form-label">Password</label>
		<input type="password" id="password" class="form-control" asp-for="Password" />
	</div>

	<div class="mb-3">
		<button type="submit" class="btn btn-dark">Login</button>
	</div>
	<input type="hidden" asp-for="ReturnUrl" />
</form>


7.Controller Login adjustment

[HttpPost]
public async Task<IActionResult> Login(LoginModel model)
{
	var loginResult = await signInManager.PasswordSignInAsync(model.UserName, model.Password, false, false);

	if (loginResult != null && loginResult.Succeeded)
	{
		if(!string.IsNullOrEmpty(model.ReturnUrl))
		{
			return Redirect(model.ReturnUrl);
		}

		return RedirectToAction("Index", "Home");
	}
	return View();
}